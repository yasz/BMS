@page "/"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<EditForm EditContext="@editBookNoContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <input id="BookNoInput" class="form-control" @bind-value="@bookNoInput.BookNo" @bind-value:event="oninput" hidden="@hiddenBookNoInput" placeholder="请扫描书籍编号" @onkeypress="@(e => OnBookNoKeyDown(e))" />
</EditForm>
<EditForm EditContext="@editVanoContext" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <input id="VanoInput" class="form-control" @bind-value="@vanoInput.Vano" @bind-value:event="oninput" hidden="@hiddenVanoInput" placeholder="请扫描学号" @onkeypress="@(e => OnVanoKeyDown(e))" />
    <p>欢迎您: @vanoInput.Vano</p>
</EditForm>



@code {
    private bool hiddenBookNoInput { get; set; } = true;
    private bool hiddenVanoInput { get; set; } = false;
    //private Library.Models.Rent rent = new Library.Models.Rent();
    private VanoInput vanoInput = new VanoInput();
    private BookNoInput bookNoInput = new BookNoInput();


    string message = "请扫描学号";
    string inputValue = "";

    private EditForm editForm;

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("MySetFocus", "VanoInput");
        }
    }
    private async Task OnBookNoKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            bool isValid = editBookNoContext.Validate();            
            if (isValid)
            {
                try
                {
                    await _bookService.AddRent(bookNoInput.BookNo, vanoInput.Vano.Substring(1,vanoInput.Vano.Length-2));
                    await JSRuntime.InvokeAsync<string>("MyPop", "借阅成功!");
                }
                catch (Exception error)
                {
                    await JSRuntime.InvokeAsync<string>("MyPop", error.Message);

                }
                finally
                {
                    NavigationManager.NavigateTo("/", true);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("MyAwait");
                bookNoInput.BookNo = "";

            }

        }
    }
    private async Task OnVanoKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            bool isValid = editVanoContext.Validate();            
            Console.WriteLine(string.Join(",", editVanoContext.GetValidationMessages().ToList()));
            if (isValid)
            {
                hiddenVanoInput = true;
                bookNoInput.BookNo = "";
                hiddenBookNoInput = false;
                await JSRuntime.InvokeVoidAsync("MyAwait");
                await JSRuntime.InvokeAsync<string>("MySetFocus", "BookNoInput");

            }
            else
            {
                await JSRuntime.InvokeVoidAsync("MyAwait");
                vanoInput.Vano = "";

            }
        }


    }
    private void OnTextChanged(ChangeEventArgs e)
    {
        inputValue = e.Value as string;
    }

    private EditContext editBookNoContext;
    private EditContext editVanoContext;

    protected override void OnInitialized()
    {
        editBookNoContext = new EditContext(this.bookNoInput);
        editVanoContext = new EditContext(this.vanoInput);

        //rent.BookNo = "1234567890";
        //rent.Vano = "";
    }


}
