@page "/"
@inject BookService BookService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input id="BookNoInput" class="form-control" @bind-value="@rent.BookNo" @bind-value:event="oninput" hidden="@hiddenBookNoInput" placeholder="请扫描书籍编号" @onkeypress="@(e => OnBookNoKeyDown(e))" />
    <input id="VanoInput" class="form-control" @bind-value="@rent.Vano" @bind-value:event="oninput" hidden="@hiddenVanoInput" placeholder="请扫描学号" @onkeypress="@(e => OnVanoKeyDown(e))" />

    <p>欢迎您: @rent.Vano</p>

</EditForm>


@code {
    private bool hiddenBookNoInput { get; set; } = true;
    private bool hiddenVanoInput { get; set; } = false;
    private Library.Models.Rent rent = new Library.Models.Rent();
    string message = "请扫描学号";
    string inputValue = "";

    private EditForm editForm;

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("MySetFocus", "VanoInput");
        }
    }
    private async Task OnBookNoKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            bool isValid = editContext.Validate();
            if (isValid)
            {
                try {
                    await BookService.AddRent(rent.BookNo, rent.Vano);
                    await JSRuntime.InvokeAsync<string>("MyPop", "借阅成功!");
                }catch (Exception error)
                {
                    await JSRuntime.InvokeAsync<string>("MyPop", error.Message);

                }
                finally
                {
                    NavigationManager.NavigateTo("/", true);
                }
            }else
            {
                rent.BookNo = "";

            }

        }
    }
    private async Task OnVanoKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            var a = rent.Vano;
            bool isValid = editContext.Validate();
            Console.WriteLine(string.Join(",", editContext.GetValidationMessages().ToList()));
            if (isValid)
            {
                hiddenVanoInput = true;
                rent.BookNo = "";
                hiddenBookNoInput = false;
                await JSRuntime.InvokeVoidAsync("MyAwait");
                await JSRuntime.InvokeAsync<string>("MySetFocus", "BookNoInput");

            }
            else
            {
                rent.Vano = "";

            }
        }


    }
    private void OnTextChanged(ChangeEventArgs e)
    {
        inputValue = e.Value as string;
    }

    private EditContext editContext;
    protected override void OnInitialized()
    {
        editContext = new EditContext(this.rent);
        rent.BookNo = "1234567890";
        rent.Vano = "";
    }


}
